# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HqeMquA7a9QQBfoINe6g_ybgqTuv0Bx_
"""

#sample plot
from matplotlib import pyplot as plt

 #Plotting to our canvas

plt.plot([1,2,3],[4,5,1])

 #Showing what we plotted

plt.show()

#simple plot with title
x = [5,2,7]
y = [2,16,4]
plt.plot(x,y)
plt.title('Info')
plt.ylabel('Y axis')
plt.xlabel('X axis')
plt.show()

#controlling fonts and overriding default settings
from matplotlib.font_manager import FontProperties
font_0 = FontProperties()
font_0.get_family()

x = [1, 2, 4, 5]
y = [5, 2, 5, 8]
plt.plot(x, y)
plt.xlabel('The x label')
plt.ylabel('The y label')
plt.title('A matplotlib plot', fontproperties = font_0, fontsize = 15, loc = 'left')

plt.plot(x, y, '--*', color = '#70a431')
plt.xlabel('The x label')
plt.ylabel('The y label')
plt.title('A matplotlib plot', fontproperties = font_0, fontsize = 15, loc = 'left')

plt.plot(x, y, '-o', color = 'purple')
plt.xlabel('The x label')
plt.ylabel('The y label')
plt.title('A matplotlib plot', fontproperties = font_0, fontsize = 15, loc = 'left')

#simple plot with style
from matplotlib import pyplot as plt
from matplotlib import style

style.use('ggplot')
x = [5,8,10]
y = [12,16,6]
x2 = [6,9,11]
y2 = [6,15,7]
plt.plot(x,y,'g',label='line one', linewidth=5)
plt.plot(x2,y2,'c',label='line two',linewidth=5)
plt.title('Epic Info')
plt.ylabel('Y axis')
plt.xlabel('X axis')
plt.legend()
plt.grid(True,color='k')
plt.show()

#bar plot
from matplotlib import pyplot as plt

plt.bar([0.25,1.25,2.25,3.25,4.25],[50,40,70,80,20],
label="BMW",color='g',width=.5)
plt.bar([.75,1.75,2.75,3.75,4.75],[80,20,20,50,60],
label="Audi", color='r',width=.5)
plt.legend()
plt.xlabel('Days')
plt.ylabel('Distance (kms)')
plt.title('Information')
plt.show()

#histogram
import matplotlib.pyplot as plt
population_age = [22,55,62,45,21,22,34,42,42,4,2,102,95,85,55,110,120,70,65,55,111,115,80,75,65,54,44,43,42,48]
bins = [0,10,20,30,40,50,60,70,80,90,100]
plt.hist(population_age, bins, histtype='bar', rwidth=0.8)
plt.xlabel('age groups')
plt.ylabel('Number of people')
plt.title('Histogram')
plt.show()

#scatter plot
import numpy as np
x = np.random.random(1000)
y = np.random.random(1000)
plt.scatter(x, y)

import matplotlib.pyplot as plt
x = [1,1.5,2,2.5,3,3.5,3.6]
y = [7.5,8,8.5,9,9.5,10,10.5]

x1=[8,8.5,9,9.5,10,10.5,11]
y1=[3,3.5,3.7,4,4.5,5,5.2]

plt.scatter(x,y, label='high income low saving',color='r')
plt.scatter(x1,y1,label='low income high savings',color='b')
plt.xlabel('saving*100')
plt.ylabel('income*1000')
plt.title('Scatter Plot')
plt.legend()
plt.show()

#pie chart
import matplotlib.pyplot as plt

days = [1,2,3,4,5]

sleeping =[7,8,6,11,7]
eating = [2,3,4,3,2]
working =[7,8,7,2,2]
playing = [8,5,7,8,13]
slices = [7,2,2,13]
activities = ['sleeping','eating','working','playing']
cols = ['c','m','r','b']

plt.pie(slices,
  labels=activities,
  colors=cols,
  startangle=90,
  shadow= True,
  explode=(0,0.1,0,0),
  autopct='%1.1f%%')

plt.title('Pie Plot')
plt.show()

#sub plots
import numpy as np
import matplotlib.pyplot as plt

def f(t):
    return np.exp(-t) * np.cos(2*np.pi*t)
t1 = np.arange(0.0, 5.0, 0.1)
t2 = np.arange(0.0, 5.0, 0.02)
plt.subplot(221)
plt.plot(t1, f(t1), 'bo', t2, f(t2))
plt.subplot(222)
plt.plot(t2, np.cos(2*np.pi*t2))
plt.show()

#One numerical variable, and several groups
#Letâ€™s say we want to study the distribution of a numerical variable, but for each group separately. Here we study the sepal length of 3 species of flower.

#view sourceprint?
# library & dataset


sns.boxplot( x=df["species"], y=df["sepal_length"] )

#box plot
import seaborn as sns
import matplotlib.pyplot as plt
df = sns.load_dataset('iris')
df.head()

sns.boxplot( y=df["sepal_length"] );

iris = sns.load_dataset("iris")
sns.catplot(data=iris, orient="h", kind="box");

#data visualisation on a data set
import seaborn as sns
tips = sns.load_dataset('tips')
tips.head()
#default plot of numeric data
tips.plot()

#plot a single quantitative feature
tips['total_bill'].plot()

#adjust the kind of plot
tips['total_bill'].plot(kind = 'hist')

#same as using pyplot directly
plt.hist(tips['total_bill'])

#same as using pyplot directly
plt.hist(tips['total_bill'])

#using additional arguments
tips['total_bill'].plot(kind = 'density', title = 'A Density Plot')

#plot results of aggregation
tips.groupby('smoker')['total_bill'].mean().plot(kind = 'bar')

import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

# Generate random data
data = np.random.rand(10, 12)

# Create the heatmap
sns.heatmap(data, annot=True, cmap='viridis')

# Display the plot
plt.show()

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

diabetes_data=pd.read_csv('/content/archive.zip')
diabetes_data.head()

diabetes_data=pd.read_csv('/content/archive.zip')
diabetes_data.tail()

diabetes_data=pd.read_csv('/content/archive.zip')
diabetes_data.info()