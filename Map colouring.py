# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yptwdO9JLiTsIebqdayo4GrKhAwz5Pqe
"""

#map colouring

class MapColoring:
    def __init__(self, regions, neighbors, colors):
        self.regions = regions
        self.neighbors = neighbors
        self.colors = colors
        self.coloring = {}
    def is_valid(self, region, color):
        for neighbor in self.neighbors.get(region, []):
            if self.coloring.get(neighbor) == color:
                return False
        return True

    def color_map(self, region_index=0):
        if region_index == len(self.regions):
            return True

        region = self.regions[region_index]
        for color in self.colors:
            if self.is_valid(region, color):
                self.coloring[region] = color
                if self.color_map(region_index + 1):
                    return True
                self.coloring.pop(region)
        return False

    def solve(self):
        if self.color_map():
            return self.coloring
        else:
            return None

regions = ['A', 'B', 'C', 'D', 'E']
neighbors = {
    'A': ['B', 'C', 'D'],
    'B': ['A', 'C', 'E'],
    'C': ['A', 'B', 'D', 'E'],
    'D': ['A', 'C'],
    'E': ['B', 'C']
}
colors = ['Red', 'Green', 'Blue', 'Yellow']

map_coloring = MapColoring(regions, neighbors, colors)
solution = map_coloring.solve()

if solution:
    print("Solution found:")
    for region, color in solution.items():
        print(f"{region}: {color}")
else:
    print("No solution exists.")